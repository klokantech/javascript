/**
 * Copyright (C) 2015 Klokan Technologies GmbH (info@klokantech.com)
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU GPL for more details.
 *
 * USE OF THIS CODE OR ANY PART OF IT IN A NONFREE SOFTWARE IS NOT ALLOWED
 * WITHOUT PRIOR WRITTEN PERMISSION FROM KLOKAN TECHNOLOGIES GMBH.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 */

/**
 * @author petr.sloup@klokantech.com (Petr Sloup)
 */

goog.provide('kt.Nominatim');

goog.require('goog.ui.ac.AutoComplete');
goog.require('goog.ui.ac.InputHandler');
goog.require('goog.ui.ac.Renderer');

goog.require('kt.NominatimMatcher');
goog.require('kt.expose');



/**
* Factory class to create a rich autocomplete widget that autocompletes an
* inputbox or textarea from data provided via ajax.  The server returns a
* complex data structure that is used with client-side javascript functions to
* render the results.
* @param {!Element} input Input element or text area.
* @param {string=} opt_url The Uri of the Nominatim service.
* @param {Object=} opt_payload Extra parameters for the Jsonp request.
* @constructor
* @extends {goog.ui.ac.AutoComplete}
*/
kt.Nominatim = function(input, opt_url, opt_payload) {
  // Create a custom renderer that renders rich rows returned from server.
  var customRenderer = {};
  customRenderer.renderRow = function(row, token, node) {
    node.innerHTML = row.data['formatted_address'] +
        ' (' + row.data['type'] + ')';
  };

  /**
  * @type {!Element}
  * @private
  */
  this.input_ = input;

  /**
  * A standard renderer that uses a custom row renderer to display the
  * rich rows generated by this autocomplete widget.
  * @type {!goog.ui.ac.Renderer}
  * @private
  */
  var renderer = new goog.ui.ac.Renderer(null, customRenderer);
  renderer.setWidthProvider(this.input_);

  /**
  * A remote matcher that parses rich results returned via JSONP from a server.
  * @type {!kt.NominatimMatcher}
  * @protected
  * @suppress {underscore}
  */
  this.matcher_ = new kt.NominatimMatcher(opt_url, opt_payload);

  /**
  * An input handler that calls select on a row when it is selected.
  * @type {!goog.ui.ac.InputHandler}
  * @private
  */
  this.inputhandler_ = new goog.ui.ac.InputHandler(null, null, false);
  this.inputhandler_.setThrottleTime(300);
  this.inputhandler_.setUpdateDuringTyping(false);
  this.inputhandler_.attachAutoComplete(this);

  // Create the widget and connect it to the input handler.
  goog.base(this, this.matcher_, renderer, this.inputhandler_);

  /**
   * @type {boolean}
   * @private
   */
  this.enabled_ = false;

  this.listen(goog.ui.ac.AutoComplete.EventType.UPDATE, function(e) {
    input.value = e.row ? e.row['formatted_address'] : '';
  });

  this.enable(true);
};
goog.inherits(kt.Nominatim, goog.ui.ac.AutoComplete);


/**
 * @param {boolean} enable
 */
kt.Nominatim.prototype.enable = function(enable) {
  if (this.enabled_ != enable) {
    this.enabled_ = enable;
    if (enable) {
      this.inputhandler_.attachInput(this.input_);
    } else {
      this.inputhandler_.detachInput(this.input_);
    }
  }
};


/**
 * @param {function(!Array.<number>)} callback
 */
kt.Nominatim.prototype.registerCallback = function(callback) {
  goog.events.listen(this, goog.ui.ac.AutoComplete.EventType.UPDATE,
      function(e) {
        if (e.row) {
          var bnds = e.row['bounds'] || e.row['viewport'];
          if (bnds) callback(bnds);
        }
      }, false, this);

  var geocoder_search = goog.bind(function(e) {
    e.preventDefault();
    if (this.enabled_) {
      this.search(this.input_.value, 1, goog.bind(function(tok, results) {
        var result = results[0];
        if (result) {
          var bnds = result['bounds'] || result['viewport'];
          callback(bnds);
        }
      }, this));
    }
  }, this);
  var form = goog.dom.getAncestorByTagNameAndClass(this.input_,
                                                   goog.dom.TagName.FORM);
  if (form) {
    goog.events.listen(form, goog.events.EventType.SUBMIT, geocoder_search);
  }
  goog.events.listen(this.input_,
                     ['webkitspeechchange', 'speechchange'], geocoder_search);
};


/**
* Calls matchHandler on a set of matching rows retrieved from server.
* @param {string} token The text that should be matched; passed to the server
*     as the 'token' query param.
* @param {number} maxMatches The maximum number of matches requested from the
*     server; passed as the 'max_matches' query param.  The server is
*     responsible for limiting the number of matches that are returned.
* @param {Function} matchHandler Callback to execute on the result after
*     matching.
*/
kt.Nominatim.prototype.search = function(token, maxMatches, matchHandler) {
  this.matcher_.requestMatchingRows(token, maxMatches, matchHandler);
};

kt.expose.symbol('kt.Nominatim', kt.Nominatim);
